<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>wrongflash=0;
wrongx=0;
wrongy=0;
wrongfade=0;

global.turn=0;
global.controlled=0;
gameOver=false;
pieces[0]=Red;
pieces[1]=Black;

global.p1=Red;
global.p2=Black;

global.scores[0]=0;
global.scores[1]=0;

dkcol=c_navy;
hue=color_get_hue(dkcol);
sat=color_get_saturation(dkcol);
val=color_get_value(dkcol);
dkcol=make_color_hsv(hue,sat/2,val);

ltcol=c_aqua;
hue=color_get_hue(ltcol);
sat=color_get_saturation(ltcol);
val=color_get_value(ltcol);
ltcol=make_color_hsv(hue,sat/2,val);

w=10;
h=10;

gw=32;
gh=32;

bx=room_width-w*gw;
by=0;

for (xx=0; xx&lt;w; xx+=1) {
  if (xx&lt;=1) {
    instance_create(b2r_x(xx), b2r_y(0), BlackSwapper);
    instance_create(b2r_x(xx), b2r_y(h-1), RedSweeper);
  }
  else if (xx&lt;=3) {
    instance_create(b2r_x(xx), b2r_y(0), BlackPatcher);
    instance_create(b2r_x(xx), b2r_y(h-1), RedSwapper);
  }
  else if (xx&lt;=5) {
    instance_create(b2r_x(xx), b2r_y(0), BlackSwapper);
    instance_create(b2r_x(xx), b2r_y(h-1), RedDropper);
  }
  else if (xx&lt;=7) {
    instance_create(b2r_x(xx), b2r_y(0), BlackDropper);
    instance_create(b2r_x(xx), b2r_y(h-1), RedPatcher);
  }
  else {
    instance_create(b2r_x(xx), b2r_y(0), BlackSweeper);
    instance_create(b2r_x(xx), b2r_y(h-1), RedSwapper);
  }
}

global.holes=ds_grid_create(w,h);
ds_grid_clear(global.holes,0);

for (xx=0; xx&lt;w; xx+=1) {
  for (yy=1; yy&lt;h-1; yy+=1) {
    if (irandom(100)&lt;10) {
      ds_grid_set(global.holes,xx,yy,1);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_grid_destroy(global.holes);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.turn&lt;0) { exit; }

inst=instance_position(mouse_x,mouse_y,pieces[global.turn]);
inst2=instance_position(mouse_x,mouse_y,pieces[!global.turn]);

if (mx&gt;=0 &amp;&amp; my&gt;=0 &amp;&amp; global.controlled==global.turn &amp;&amp; canGo(mx,my)) {
  moveTo(mx,my);
  sound_play(slide_sfx);
}
else if (mx&gt;=0 &amp;&amp; my&gt;=0) {
  if (!instance_exists(inst2)) {
    if (!instance_exists(inst)) {
      wrongfade=0;
      wrongflash=1;
      wrongx=mx;
      wrongy=my;
      sound_play(wrong_sfx);
    }
    else if (inst.selected==0) {
      wrongfade=0;
      wrongflash=1;
      wrongx=mx;
      wrongy=my;
      sound_play(wrong_sfx);    
    }
  }
  else {
    wrongfade=0;
    wrongflash=1;
    wrongx=mx;
    wrongy=my;
    sound_play(wrong_sfx);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_persistent=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(Red)) {
    if (!gameOver) {
        gameOver=true;
        show_message_custom("Black wins!");
    }
    else {
        game_restart();
    }
}
else if (!instance_exists(Black)) {
    if (!gameOver) {
        gameOver=true;
        show_message_custom("Red wins!");
    }
    else {
        game_restart();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_add);
draw_set_alpha(0.85);

/* Draw board */

for (xx=0; xx&lt;w; xx+=1) {
  for (yy=0; yy&lt;h; yy+=1) {
    draw_set_color(dkcol*((xx+yy) mod 2) + ltcol*!((xx+yy) mod 2));
    if (ds_grid_get(global.holes,xx,yy)==1) { draw_set_color(c_black); }
    draw_rectangle(b2r_x(xx), b2r_y(yy), b2r_x(xx+1), b2r_y(yy+1), 0);
    draw_rectangle(b2r_x(xx), b2r_y(yy), b2r_x(xx+1), b2r_y(yy+1), 1);
  }
}

/* Indicate moused-over coordinates on your turn */
mx=-1;
my=-1;

/* TODO: Change this so it's not just on mouse over, but on selection of a piece, and shows all the possible moves, not just one */
if (global.controlled==global.turn &amp;&amp; mouse_x&gt;=b2r_x(0) &amp;&amp; mouse_y&gt;=b2r_y(0) &amp;&amp; mouse_x&lt;=b2r_x(w) &amp;&amp; mouse_y&lt;=b2r_y(h)) {
  sel=noone;
  with (pieces[global.controlled]) {
    if (selected) { other.sel=id; }
  }
  if (instance_exists(sel)) {
    mx=(mouse_x-bx) div gw;
    my=(mouse_y-by) div gh;
    
    if (ds_grid_get(global.holes,mx,my)==0 || getType(sel.object_index)=="Patcher") {
      draw_rectangle_color(b2r_x(mx), b2r_y(my), b2r_x(mx+1), b2r_y(my+1), c_gray, c_gray, c_gray, c_gray, 0);
      draw_rectangle_color(b2r_x(mx), b2r_y(my), b2r_x(mx+1), b2r_y(my+1), c_gray, c_gray, c_gray, c_gray, 1);
      if (!canGo(mx,my)) {
        draw_set_blend_mode(bm_normal);
        draw_set_alpha(1);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_color(b2r_x(mx)+gw/2, b2r_y(my)+gh/2, "X", c_red, c_red, c_red, c_red, 0.5);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
      }
    }
  }
}

draw_set_blend_mode(bm_normal);
draw_set_alpha(1);

if (wrongflash) {
  wrongfade+=0.1;

  if (wrongfade&gt;=1) {
    wrongflash=0;
    wrongfade=0;
  }

  draw_set_alpha(sin(pi*wrongfade));
  draw_rectangle_color(b2r_x(wrongx)+1, 1+b2r_y(wrongy), b2r_x(wrongx+1), b2r_y(wrongy+1), c_red, c_maroon, c_red, c_maroon, 0);
  draw_set_alpha(1);
}

/* Separator form HUD */
draw_line_color(bx-1,0,bx-1,room_height,c_gray,c_gray);
draw_line_color(bx-2,0,bx-2,room_height,c_ltgray,c_ltgray);
draw_line_color(bx-3,0,bx-3,room_height,c_gray,c_gray);

room_caption="Score: Red "+string(global.scores[0])+" - Black "+string(global.scores[1]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
